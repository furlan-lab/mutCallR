% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read.R
\name{read_mutcaller}
\alias{read_mutcaller}
\title{Add mutcaller data to a Seurat or Monocle3 object}
\usage{
read_mutcaller(
  obj = NULL,
  count_files,
  name,
  prefixes = NULL,
  cores = 1,
  read_thresh = 5,
  use_other = F,
  query_top = T,
  reverse_complement = F
)
}
\arguments{
\item{obj}{input Seurat or Monocole3 object (optional).  If not provided this function will process all mutCaller counts and return cell calls}

\item{count_files}{a vector of one or more paths to counts.txt.gz file output by mutcaller; e.g. '/home/user/mutcaller_run/out_star/counts.txt.gz'}

\item{name}{the name of the variant to be added to the object (or returned as raw counts).  This is found in the 5th column of the counts.txt.gz file}

\item{prefixes}{the optional name of prefixes to be added to cell barcodes.  The length of this cvector of prefixes should be the same as the length of count_files}

\item{cores}{num of cores to use for processing counts}

\item{read_thresh, }{the minimum number of reads required to support a molecule call}

\item{use_other, }{retain information regarding 'Other' cell calls in output; default is F}

\item{query_top, }{option for factoring the cell call output such that the levels of the factor enable plotting query cells on top; default = T}
}
\value{
a seurat/monocle3 object with a new column in the metadata( or colData) with cell classificatiuoon for a given variant (previously counted using mutcaller)
}
\description{
This function aims to import mutCaller data into Seurat/Monocle3 objects.  Output files for mutCaller will include a counts.txt.gz file.
This (These) file location(s) should be provided using the 'counts_file' argument.  If specific prefixes have been cellular barcode (CB) in your seurat/monocle
object, you can provide them uses the 'prefixes' for each mutCaller counts.txt.gz file (optional).  The 'name' of the variant to be extracted from the counts.txt.gz file
is a required argument and this function will need to be invoked for each variant contained in the counts.txt.gz file.

Use the glimpse_countsfile function in this package, to quickly see all the names of variants contained in a mutCaller counts.txt.gz file and the number of unique CB/UMI combinations
associated with each variant.  After loading counts data, read_mutcaller will classify each cell as 'Ref', 'Query', or 'Other'.  Note that calls for 'Other' (that is variants that
neither fit the Ref or the Query) are omitted by default, but can be retained by setting the use_other argument to TRUE.  The read_thresh argument is used
to omit calls with substantiating reads fewer than this threshold.  Note that in cases where multiple reads with the same CB/UMI have discrepent calls,
read_mutcaller will prioritize the call with the highest readcount supporting the variant.  This calculation includes a consideration of cases in which
reads that have the same CB, but UMIs that differ by only 1 bp in their UMIs.  In these situations, read_mutcaller calls will lump these likely errors in UMI sequence with their
closely related neighbors.
}
